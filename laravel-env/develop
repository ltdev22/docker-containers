#!/usr/bin/env bash

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "Develop"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  ./develop COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}./develop up${NC}        Start the application"
    echo "  ${GREEN}./develop up -d${NC}     Start the application in the background"
    echo "  ${GREEN}./develop stop${NC}      Stop the application"
    echo "  ${GREEN}./develop down${NC}      Stop the application and kill all containers"
    echo "  ${GREEN}./develop restart${NC}   Restart the application"
    echo "  ${GREEN}./develop ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}./develop artisan ...${NC}          Run an Artisan command"
    echo "  ${GREEN}./develop artisan make:controller FooController${NC}"
    echo "  ${GREEN}./develop artisan queue:work${NC}"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}./develop php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}./develop php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}./develop composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}./develop composer require laravel/sanctum${NC}"
    echo "  ${GREEN}./develop composer dump-autoload -o${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}./develop npm ...${NC}        Run a npm command"
    echo "  ${GREEN}./develop npm install${NC}"
    echo "  ${GREEN}./develop npm run prod${NC}"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}./develop tinker${NC}       Start a new Laravel Tinker session"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Set environment variables for dev
export WEB_PORT=${WEB_PORT:-8080}
export PHP_PORT=${PHP_PORT:-9000}
export MYSQL_PORT=${MYSQL_PORT:-3306}
export NODE_PORT=${NODE_PORT:-3000}
export REDIS_PORT=${REDIS_PORT:-6379}
export MAILHOG_DASHBOARD_PORT=${MAILHOG_DASHBOARD_PORT:-8025}
export MEILISEARCH_PORT=${MEILISEARCH_PORT:-7700}

export WWWUSER="$(id -u)"
export WWWGROUP="$(id -g)"

COMPOSE="docker-compose"

if [ $# -gt 0 ]; then

    # If "artisan" is used, pass through to "artisan" service and run the artisan command from the params passed
    if [ "$1" == "artisan" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            php \
            php artisan "$@"
    
    # If "composer" is used, pass through to "composer" service and run the command from the params passed
    elif [ "$1" == "composer" ]; then
        shift 1
        $COMPOSE run --rm \
            composer \
            composer "$@"

    # If "php" is used, pass through to "php" service and run the command from the params passed
    elif [ "$1" == "php" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            php \
            php "$@"
    
    # If "npm" is used, run npm from the node container
    elif [ "$1" == "npm" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            npm \
            npm "$@"

    elif [ "$1" == "tinker" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            php \
            php artisan tinker

    elif [ "$1" == "mysql" ]; then
        shift 1
        $COMPOSE exec -it \
            mysql /bin/bash \
            -c "MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}"
    else
        $COMPOSE "$@"
    fi
else
    $COMPOSE ps
fi