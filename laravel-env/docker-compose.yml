version: "3.8"

services:
    web:
        container_name: apache
        # container_name: nginx
        build:
            context: .
            dockerfile: docker/apache/Dockerfile
            # dockerfile: docker/nginx/Dockerfile
            args:
                - PROJECT_ROOT=${PROJECT_ROOT:-source}
        volumes:
            - ./source/public:/var/www/html/public
        ports:
            - "8888:80"
        depends_on:
            - php
            - mysql
            - redis
        networks:
            - local_frontend
            - local_backend
        env_file:
            - ./docker/docker.env
    php:
        container_name: php
        build:
            context: .
            dockerfile: docker/php/Dockerfile
            args:
                - PROJECT_ROOT=${PROJECT_ROOT:-source}
        ports:
            - "9000:9000"
        volumes:
            - ./source:/var/www/html
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    mysql:
        container_name: mysql
        # image: mysql:5.7
        image: mariadb:10.6
        volumes:
            - dbdata:/var/lib/mysql
        ports:
            - 4306:3306
        networks:
            - local_backend
        environment:
            MYSQL_DATABASE: laracommerce
            MYSQL_USER: laravel
            MYSQL_PASSWORD: secret
            MYSQL_ROOT_PASSWORD: root
        env_file:
            - ./docker/docker.env
        #     - ./source/.env
    composer:
        container_name: composer
        build: 
            context: .
            dockerfile: docker/composer/Dockerfile
        volumes:
            - ./source:/var/www/html
        working_dir: /var/www/html
        depends_on:
            - php
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    npm:
        container_name: npm
        image: node:lts-alpine
        ports:
            - 3000:3000
        working_dir: /var/www/html
        entrypoint: ["npm"]
        volumes:
            - ./source:/var/www/html
        networks:
            - local_frontend
        env_file:
            - ./docker/docker.env
    artisan:
        container_name: artisan
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        entrypoint: ["php", "/var/www/html/artisan"]
        working_dir: /var/www/html/
        depends_on:
            - mysql
        volumes:
            - ./source:/var/www/html
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    phpunit:
        container_name: phpunit
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        entrypoint: ["/var/www/html/vendor/bin/phpunit"]
        working_dir: /var/www/html/
        volumes:
            - ./source:/var/www/html
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    scheduler:
        container_name: scheduler
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        entrypoint: ["php", "/var/www/html/artisan", "schedule:run", "--verbose", "--no-interaction"]
        working_dir: /var/www/html/
        depends_on:
            - mysql
        volumes:
            - ./source:/var/www/html
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    queue:
        container_name: queue
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        entrypoint: ["php", "/var/www/html/artisan", "queue:work", "--verbose", "--tries=3", "--stop-when-empty"]
        working_dir: /var/www/html/
        depends_on:
            - mysql
        volumes:
            - ./source:/var/www/html
        networks:
            - local_backend
        env_file:
            - ./docker/docker.env
    # redis:
    #     container_name: redis
    #     image: redis:alpine
    #     ports:
    #         - 6379:6379
    #     volumes:
    #         - redis:/data
    #     networks:
    #         - local_backend
    #     env_file:
    #         - ./docker/docker.env
networks:
    local_backend:
    local_frontend:
        driver: 'bridge'
volumes:
    # redis:
    dbdata:
        driver: 'local'